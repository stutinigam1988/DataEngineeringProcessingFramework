#!/bin/bash
#shell Script Name         : GenerateIFSExtracts.sh     
#
# Author                    : Stuti Nigam                     
#
# Date                      : 3rdJune 2015              
#
# Description/Object        : Script for copying non zero byte extracts generated by Interface jobs to AML 
#                                             
# Parameters                : Step Id           
#                                             
# History                    :
#
#  DATE                 VERSION                              CHANGED BY                     CHANGE DESCRIPTION
#  --------------------------------------------------------------------------------------------------------------------------
#  
#
#===============================================================================================================================#


#####################  MAIN  #############################


#expanding alias
shopt -s expand_aliases
#creating standard error and information variables
PrInf=": Info-"
PrErr=": Error-"
#exporting standard error and information variables
export PrInf
export PrErr
#creating alias on date variables
alias DATE='echo `date +%Y-%m-%d-%H:%M:%S`'
#Appending Standard Information and error variables with Date
alias PrInfD='echo $PrInf `DATE`'
alias PrErrD='echo $PrErr `DATE`'
#exporting Information and Error variables for logging messages to log files
export PrInfD
export PrErrD
# Getting the name of the script
script_name=$( basename $0 )
#Defining Date and Time format applicable to this session of script
DATE_PATTERN=YYYYMMDD
TIME_PATTERN=HHMISS
#Calling configuration file 
. /u02/cifs/informatica/INT_INFA_TEST/CDD_DEV/Scripts/Configuration_File.cfg
#Calling Function file
. $SCRIPT_DIR/File_Validation_functions.sh

#Creating log file Variable for this session of script run
export LOG_FILE=$LOG_DIR/GenerateIFSExtracts_`date +%Y-%m-%d-%H_%M_%S`.log
#Creating log file for this session run
touch $LOG_FILE
export ERROR_DATA=$TMP_DIR/error_data_Ifs_Extracts`date +%Y-%m-%d-%H_%M_%S`.txt
touch $ERROR_DATA
EXTRACT_NAME=Extract_Names_Detica
export EXTRACT_LIST=$TMP_DIR/"$EXTRACT_NAME"_"$1"_`date +%N`
touch $EXTRACT_LIST
FEED_ID_LIST=Feed_Id_List
export LIST_FILE=$TMP_DIR/"$FEED_ID_LIST"_"$1"_`date +%N`
touch $LIST_FILE
echo "$EXTRACT_LIST is file list file after modifications"
#Trigger message for start of script written to Log file
echo "Process Started...." > $LOG_FILE
echo "SCRIPT NAME: $script_name" >> $LOG_FILE
export STEP_ID=$1
#STEP ID is the parameter for this script
#start of loop for step id

		echo "Step Id is : $STEP_ID" >> $LOG_FILE


		#############################################################"
		#Extraction of feed name"
		#############################################################"
		
		l_f_extract_detica_feed_name 

		if [ $? -ne 0 ]
		then
			echo "`PrErrD` : An error occurred in executing l_f_select_batch_date function to get batch date"
		else
			echo "$l_query_ret" >$LIST_FILE
			
		echo "$FEED_NAMES"
	
		fi	
		
		echo "LIST now **************************************"
		#cat  $LIST_FILE
		FIRST_LINE=`cat $LIST_FILE|head -1`
		BATCH_DATE=`echo $FIRST_LINE| cut -d',' -f3`
		echo $BATCH_DATE
		echo "started now"
		echo "***"
export COUNT=0	
echo "$COUNT is count"
	l_f_insert_step_audit $1 "STARTED"
	echo "here we are"
			#start of function return check --l_f_insert_step_audit
			if [ $? -ne 0 ]
			then
				echo "`PrErrD`: An error occurred in executing l_f_insert_step_audit function." >> $LOG_FILE
			else
                echo "`PrInfD`:l_f_insert_step_audit function is successful." >> $LOG_FILE
            fi 
			#close of function return check--l_f_insert_step_audit
            #close of function call to insert entry into step audit--l_f_insert_step_audit
            echo $STEP_ID $BATCH_DATE 			
			#start of function call to  extract step_log_id for that step (only status started) --l_f_extract_step_log_id
			l_f_extract_step_log_id $STEP_ID $BATCH_DATE "STARTED"
			#start of function return check --l_f_extract_step_log_id
            if [ $? -ne 0 ]
			then
			    echo "`PrErrD` : An error occurred in executing l_f_extract_step_log_id function." >> $LOG_FILE
            else
                echo "`PrInfD`:l_f_extract_step_log_id function is successful." >> $LOG_FILE
				export STEP_LOG_ID=$l_query_ret 
			fi
			#close of function return check--l_f_extract_step_log_id
            #close of function call to extract step_log_id --l_f_extract_step_log_id
						
			#Starting validation of zero byte file	
			unset $FEED_NAME
while read line 
do

		echo "$TGT_FILE_LOCATION for here" >> $LOG_FILE
		#Redirecting the path to Target Directory
		cd $TGT_FILE_LOCATION
		echo "$TGT_FILE_LOCATION is target location" >> $LOG_FILE
		FEED_ID=`echo $line| cut -d',' -f2`
		FILE=`echo $line| cut -d',' -f1`
		BATCH_DATE=`echo $line| cut -d',' -f3`
		#Searching for extracts for that batchdate and moving them to file

		echo "$FILE" >> $LOG_FILE
		export FILE=`ls $FILE*`
		
		echo "$FILE is file name"
		if [ -n $TGT_FILE_LOCATION/$FILE ]
		then
		echo "`PrInfD`:File with file name :$FILE is found and fetched for processing "  >> $LOG_FILE
		echo "TGT_FILE_LOCATION::$TGT_FILE_LOCATION and FILE::$FILE" >> $LOG_FILE
			if [ -s $TGT_FILE_LOCATION/$FILE ]
            then  
			export ZERO_BYTE_EXTRACT=N
				AMT_SUM_CHK=0			
				#start of function call to make entry into feed audit--l_f_insert_feed_audit
				echo "$BATCH_DATE is batch date in ZERO byte block" >> $LOG_FILE
				#echo "l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID 0 "$FILE" $BATCH_DATE $BATCH_DATE $AMT_SUM_CHK "
				echo "l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID 0 "$FILE" $BATCH_DATE $BATCH_DATE $AMT_SUM_CHK " >> $LOG_FILE
				echo 'CHECKING' >>  $LOG_FILE
				echo $STEP_LOG_ID >> $LOG_FILE
				echo $FEED_ID >> $LOG_FILE
				echo $BATCH_DATE >> $LOG_FILE
				echo $AMT_SUM_CHK >> $LOG_FILE
				echo 'CHEKING CLOSED'
				
				
				l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID 0 "$FILE" $BATCH_DATE $BATCH_DATE 0 ""
				# start of function return check--l_f_insert_feed_audit
				if [ $? -ne 0 ]
				then
					echo "`PrErrD` : An error occurred in executing l_f_insert_feed_audit function." >> $LOG_FILE
				else
					echo "`PrInfD`: l_f_insert_feed_audit function for inserting into Feed Audit Table is complete." >> $LOG_FILE
				fi
                #close of function return check--l_f_insert_feed_audit
                #close of function call to insert entry into feed audit table
				echo "AML_LOCATION::$AML_LOCATION"  >> $LOG_FILE
				echo "FILE::$FILE" >> $LOG_FILE
				cp "$FILE" $AML_LOCATION/"$FILE"
				
				if [ $? -ne 0 ]
				then
					echo "`PrErrD` : An error occurred while coping the files to target location." >> $LOG_FILE
					export ERROR_DATA=$TMP_DIR/error_data_$STEP_ID_`date +%Y-%m-%d-%H_%M_%S_%N`.txt
					touch $ERROR_DATA
					ERR_CD=$Error_Code_CF
			        ERR_CAT_CD=$Error_Category
					echo "$STEP_LOG_ID|$ERR_CD|$ERR_CAT_CD|$FILE_NAME|$BATCH_DATE" >> $ERROR_DATA
					l_f_insert_error_audit $ERROR_DATA
					
				else
					echo "`PrInfD`: File copied successfully to the target location." >> $LOG_FILE
				fi
				
					
			else
             
                export ZERO_BYTE_EXTRACT=Y 
				echo "ZERO_BYTE_EXTRACT::$ZERO_BYTE_EXTRACT" >> $LOG_FILE
				echo "$BATCH_DATE is bdate and $ZERO_BYTE_EXTRACT"
					FILE_SIZE_NZ=`wc -l $FILE |awk -F' ' '{print $1}'`
					
					SUM=`expr $FILE_SIZE_NZ + 1`
					echo "$SUM is sum"
					echo "$FILE_SIZE_NZ is file size"
					echo "$BATCH_DATE is bdate"
					echo "$FILE_SIZE_NZ is file size 2"
					AMT_SUM_CHK=0
					echo "l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID $FILE_SIZE_NZ "$FILE" $BATCH_DATE $BATCH_DATE $AMT_SUM_CHK ">> $LOG_FILE
				l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID $FILE_SIZE_NZ "$FILE" $BATCH_DATE $BATCH_DATE 0 ""
				# start of function return check--l_f_insert_feed_audit
				if [ $? -ne 0 ]
				then
					echo "`PrErrD` : An error occurred in executing l_f_insert_feed_audit function." >> $LOG_FILE
				else
					echo "`PrInfD`: l_f_insert_feed_audit function for inserting into Feed Audit Table is complete." >> $LOG_FILE
				fi	
				#cp "$FILE" $AML_LOCATION/"$FILE"
			fi
		else
			echo "`PrErrD` : no file found for this extract pattern"
			
			STATUS='FAILED'
			COUNT=`expr $COUNT + 1`
			echo "$COUNT is count"
			ERR_CD=$Error_Code_FNF
			ERR_CAT_CD=$Error_Category
            echo "$STEP_LOG_ID|$ERR_CD|$ERR_CAT_CD|$SEARCH_FILE|$BATCH_DATE" > $ERROR_DATA
		
			 export AMT_SUM_CHK=0
echo "l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID 0 "$FILE" $BATCH_DATE $BATCH_DATE $AMT_SUM_CHK "			 >> $LOG_FILE
l_f_insert_feed_audit $STEP_LOG_ID $FEED_ID 0 "$FILE" $BATCH_DATE $BATCH_DATE 0 ""

        fi
	l_f_archive_detica_extracts  "$FILE" "$BATCH_DATE"
	if [ $? -ne 0 ]
				then
					echo "`PrErrD` : An error occurred in executing l_f_archive_detica_extracts" >> $LOG_FILE
				else
					echo "`PrInfD`:l_f_archive_detica_extracts function for archiving the generated extracts is completed successfully " >> $LOG_FILE
				fi	
	
	done < $LIST_FILE		

		
				if [ $COUNT -ne 0 ] 
				then
				  STATUS=FAILED
				  FILE_SIZE=0
				  export FILE_SIZE
				  l_f_update_step_audit $STEP_ID $STATUS "$FILE" "" "NO_FILE"
                    l_f_insert_error_audit $ERROR_DATA
                    #start of function return check--l_f_insert_error_audit
                    if [ $? -ne 0 ]
                    then
                                                                
                    echo "`PrErrD` : An error occurred in executing l_f_update_step_audit function." >> $LOG_FILE
                    else
                    echo "`PrInfD`:l_f_update_step_audit function for updating into Step Audit Table is complete." >> $LOG_FILE
                    fi
				else
				STATUS=SUCCESS 
				FILE_SIZE=0
				export FILE_SIZE
				l_f_update_step_audit $STEP_ID $STATUS "DETICA_EXTRACTS" "" "NO_FILE"
				fi
